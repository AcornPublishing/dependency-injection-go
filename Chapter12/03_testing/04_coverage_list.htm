<!DOCTYPE html>
<!-- saved from url=(0098)file:///private/var/folders/j1/jctgvxk55ngftwfqp1wzrt440000gs/T/cover379897937/coverage.html#file0 -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		
		<style>
			body {
				background: black;
				color: rgb(80, 80, 80);
			}
			body, pre, #legend span {
				font-family: Menlo, monospace;
				font-weight: bold;
			}
			#topbar {
				background: black;
				position: fixed;
				top: 0; left: 0; right: 0;
				height: 42px;
				border-bottom: 1px solid rgb(80, 80, 80);
			}
			#content {
				margin-top: 50px;
			}
			#nav, #legend {
				float: left;
				margin-left: 10px;
			}
			#legend {
				margin-top: 12px;
			}
			#nav {
				margin-top: 10px;
			}
			#legend span {
				margin: 0 5px;
			}
			.cov0 { color: rgb(192, 0, 0) }
.cov1 { color: rgb(128, 128, 128) }
.cov2 { color: rgb(116, 140, 131) }
.cov3 { color: rgb(104, 152, 134) }
.cov4 { color: rgb(92, 164, 137) }
.cov5 { color: rgb(80, 176, 140) }
.cov6 { color: rgb(68, 188, 143) }
.cov7 { color: rgb(56, 200, 146) }
.cov8 { color: rgb(44, 212, 149) }
.cov9 { color: rgb(32, 224, 152) }
.cov10 { color: rgb(20, 236, 155) }

		</style>
	</head>
	<body>
		<div id="topbar">
			<div id="nav">
				<select id="files">
				
				<option value="file0">github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/modules/list/list.go (38.1%)</option>
				
				</select>
			</div>
			<div id="legend">
				<span>not tracked</span>
			
				<span class="cov0">not covered</span>
				<span class="cov8">covered</span>
			
			</div>
		</div>
		<div id="content">
		
		<pre class="file" id="file0" style="display: block;">package list

import (
        "context"
        "errors"

        "github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/logging"
        "github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/modules/data"
)

var (
        // error thrown when there are no people in the database
        errPeopleNotFound = errors.New("no people found")
)

// NewLister creates and initializes a Lister
func NewLister(cfg Config) *Lister <span class="cov0" title="0">{
        return &amp;Lister{
                cfg: cfg,
        }
}</span>

// Config is the config for Lister
type Config interface {
        Logger() logging.Logger
        DataDSN() string
}

// Lister will attempt to load all people in the database.
// It can return an error caused by the data layer
type Lister struct {
        cfg  Config
        data myLoader
}

// Exchange will load the people from the data layer
func (l *Lister) Do() ([]*Person, error) <span class="cov0" title="0">{
        // load all people
        people, err := l.load()
        if err != nil </span><span class="cov0" title="0">{
                return nil, err
        }</span>

        <span class="cov0" title="0">if len(people) == 0 </span><span class="cov0" title="0">{
                // special processing for 0 people returned
                return nil, errPeopleNotFound
        }</span>

        <span class="cov0" title="0">return l.convert(people), nil</span>
}

// load all people
func (l *Lister) load() ([]*data.Person, error) <span class="cov8" title="1">{
        people, err := l.getLoader().LoadAll(context.TODO())
        if err != nil </span><span class="cov8" title="1">{
                if err == data.ErrNotFound </span><span class="cov8" title="1">{
                        // By converting the error we are encapsulating the implementation details from our users.
                        return nil, errPeopleNotFound
                }</span>
                <span class="cov8" title="1">return nil, err</span>
        }

        <span class="cov8" title="1">return people, nil</span>
}

func (l *Lister) getLoader() myLoader <span class="cov8" title="1">{
        if l.data == nil </span><span class="cov0" title="0">{
                l.data = data.NewDAO(l.cfg)

                // temporarily add a log tracker
                l.data.(*data.DAO).Tracker = data.NewLogTracker(l.cfg.Logger())
        }</span>

        <span class="cov8" title="1">return l.data</span>
}

func (l *Lister) convert(in []*data.Person) []*Person <span class="cov0" title="0">{
        out := make([]*Person, len(in))

        for index, thisRecord := range in </span><span class="cov0" title="0">{
                out[index] = &amp;Person{
                        ID:       thisRecord.ID,
                        FullName: thisRecord.FullName,
                        Phone:    thisRecord.Phone,
                }
        }</span>

        <span class="cov0" title="0">return out</span>
}

//go:generate mockery -name=myLoader -case underscore -testonly -inpkg -note @generated
type myLoader interface {
        LoadAll(ctx context.Context) ([]*data.Person, error)
}

// Person is a copy/sub-set of data.Person so that the relationship does not leak.
// It also allows us to remove/hide and internal fields
type Person struct {
        ID       int
        FullName string
        Phone    string
}
</pre>
		
		</div>
	
	<script>
	(function() {
		var files = document.getElementById('files');
		var visible;
		files.addEventListener('change', onChange, false);
		function select(part) {
			if (visible)
				visible.style.display = 'none';
			visible = document.getElementById(part);
			if (!visible)
				return;
			files.value = part;
			visible.style.display = 'block';
			location.hash = part;
		}
		function onChange() {
			select(files.value);
			window.scrollTo(0, 0);
		}
		if (location.hash != "") {
			select(location.hash.substr(1));
		}
		if (!visible) {
			select("file0");
		}
	})();
	</script>

</body></html>