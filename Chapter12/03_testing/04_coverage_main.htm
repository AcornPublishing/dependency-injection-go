<!DOCTYPE html>
<!-- saved from url=(0098)file:///private/var/folders/j1/jctgvxk55ngftwfqp1wzrt440000gs/T/cover635887609/coverage.html#file0 -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		
		<style>
			body {
				background: black;
				color: rgb(80, 80, 80);
			}
			body, pre, #legend span {
				font-family: Menlo, monospace;
				font-weight: bold;
			}
			#topbar {
				background: black;
				position: fixed;
				top: 0; left: 0; right: 0;
				height: 42px;
				border-bottom: 1px solid rgb(80, 80, 80);
			}
			#content {
				margin-top: 50px;
			}
			#nav, #legend {
				float: left;
				margin-left: 10px;
			}
			#legend {
				margin-top: 12px;
			}
			#nav {
				margin-top: 10px;
			}
			#legend span {
				margin: 0 5px;
			}
			.cov0 { color: rgb(192, 0, 0) }
.cov1 { color: rgb(128, 128, 128) }
.cov2 { color: rgb(116, 140, 131) }
.cov3 { color: rgb(104, 152, 134) }
.cov4 { color: rgb(92, 164, 137) }
.cov5 { color: rgb(80, 176, 140) }
.cov6 { color: rgb(68, 188, 143) }
.cov7 { color: rgb(56, 200, 146) }
.cov8 { color: rgb(44, 212, 149) }
.cov9 { color: rgb(32, 224, 152) }
.cov10 { color: rgb(20, 236, 155) }

		</style>
	</head>
	<body>
		<div id="topbar">
			<div id="nav">
				<select id="files">
				
				<option value="file0">github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/main.go (0.0%)</option>
				
				<option value="file1">github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/wire_gen.go (40.0%)</option>
				
				</select>
			</div>
			<div id="legend">
				<span>not tracked</span>
			
				<span class="cov0">not covered</span>
				<span class="cov8">covered</span>
			
			</div>
		</div>
		<div id="content">
		
		<pre class="file" id="file0" style="display: block;">package main

import (
        "context"
        "os"

        "github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/config"
        "github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/modules/exchange"
        "github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/modules/get"
        "github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/modules/list"
        "github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/modules/register"
        "github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/rest"
        "github.com/google/go-cloud/wire"
)

func main() <span class="cov0" title="0">{
        // bind stop channel to context
        ctx := context.Background()

        // start REST server
        server, err := initializeServer()
        if err != nil </span><span class="cov0" title="0">{
                os.Exit(-1)
        }</span>

        <span class="cov0" title="0">server.Listen(ctx.Done())</span>
}

// List of wire enabled objects
var wireSetWithoutConfig = wire.NewSet(
        // *exchange.Converter
        exchange.NewConverter,

        // *get.Getter
        get.NewGetter,

        // *list.Lister
        list.NewLister,

        // *register.Registerer
        wire.Bind(new(register.Exchanger), &amp;exchange.Converter{}),
        register.NewRegisterer,

        // *rest.Server
        wire.Bind(new(rest.GetModel), &amp;get.Getter{}),
        wire.Bind(new(rest.ListModel), &amp;list.Lister{}),
        wire.Bind(new(rest.RegisterModel), &amp;register.Registerer{}),
        rest.New,
)

var wireSet = wire.NewSet(
        wireSetWithoutConfig,

        // *config.Config
        config.Load,

        // *exchange.Converter
        wire.Bind(new(exchange.Config), &amp;config.Config{}),

        // *get.Getter
        wire.Bind(new(get.Config), &amp;config.Config{}),

        // *list.Lister
        wire.Bind(new(list.Config), &amp;config.Config{}),

        // *register.Registerer
        wire.Bind(new(register.Config), &amp;config.Config{}),

        // *rest.Server
        wire.Bind(new(rest.Config), &amp;config.Config{}),
)
</pre>
		
		<pre class="file" id="file1" style="display: none">// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
        "github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/config"
        "github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/modules/exchange"
        "github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/modules/get"
        "github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/modules/list"
        "github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/modules/register"
        "github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/rest"
)

// Injectors from wire.go:

func initializeServer() (*rest.Server, error) <span class="cov0" title="0">{
        configConfig, err := config.Load()
        if err != nil </span><span class="cov0" title="0">{
                return nil, err
        }</span>
        <span class="cov0" title="0">getter := get.NewGetter(configConfig)
        lister := list.NewLister(configConfig)
        converter := exchange.NewConverter(configConfig)
        registerer := register.NewRegisterer(configConfig, converter)
        server := rest.New(configConfig, getter, lister, registerer)
        return server, nil</span>
}

func initializeServerCustomConfig(exchangeConfig exchange.Config, getConfig get.Config, listConfig list.Config, registerConfig register.Config, restConfig rest.Config) *rest.Server <span class="cov8" title="1">{
        getter := get.NewGetter(getConfig)
        lister := list.NewLister(listConfig)
        converter := exchange.NewConverter(exchangeConfig)
        registerer := register.NewRegisterer(registerConfig, converter)
        server := rest.New(restConfig, getter, lister, registerer)
        return server
}</span>
</pre>
		
		</div>
	
	<script>
	(function() {
		var files = document.getElementById('files');
		var visible;
		files.addEventListener('change', onChange, false);
		function select(part) {
			if (visible)
				visible.style.display = 'none';
			visible = document.getElementById(part);
			if (!visible)
				return;
			files.value = part;
			visible.style.display = 'block';
			location.hash = part;
		}
		function onChange() {
			select(files.value);
			window.scrollTo(0, 0);
		}
		if (location.hash != "") {
			select(location.hash.substr(1));
		}
		if (!visible) {
			select("file0");
		}
	})();
	</script>

</body></html>