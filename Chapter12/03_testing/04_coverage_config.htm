<!DOCTYPE html>
<!-- saved from url=(0098)file:///private/var/folders/j1/jctgvxk55ngftwfqp1wzrt440000gs/T/cover172097763/coverage.html#file0 -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		
		<style>
			body {
				background: black;
				color: rgb(80, 80, 80);
			}
			body, pre, #legend span {
				font-family: Menlo, monospace;
				font-weight: bold;
			}
			#topbar {
				background: black;
				position: fixed;
				top: 0; left: 0; right: 0;
				height: 42px;
				border-bottom: 1px solid rgb(80, 80, 80);
			}
			#content {
				margin-top: 50px;
			}
			#nav, #legend {
				float: left;
				margin-left: 10px;
			}
			#legend {
				margin-top: 12px;
			}
			#nav {
				margin-top: 10px;
			}
			#legend span {
				margin: 0 5px;
			}
			.cov0 { color: rgb(192, 0, 0) }
.cov1 { color: rgb(128, 128, 128) }
.cov2 { color: rgb(116, 140, 131) }
.cov3 { color: rgb(104, 152, 134) }
.cov4 { color: rgb(92, 164, 137) }
.cov5 { color: rgb(80, 176, 140) }
.cov6 { color: rgb(68, 188, 143) }
.cov7 { color: rgb(56, 200, 146) }
.cov8 { color: rgb(44, 212, 149) }
.cov9 { color: rgb(32, 224, 152) }
.cov10 { color: rgb(20, 236, 155) }

		</style>
	</head>
	<body>
		<div id="topbar">
			<div id="nav">
				<select id="files">
				
				<option value="file0">github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/config/config.go (28.6%)</option>
				
				</select>
			</div>
			<div id="legend">
				<span>not tracked</span>
			
				<span class="cov0">not covered</span>
				<span class="cov8">covered</span>
			
			</div>
		</div>
		<div id="content">
		
		<pre class="file" id="file0" style="display: block;">package config

import (
        "encoding/json"
        "fmt"
        "io/ioutil"
        "os"

        "github.com/PacktPublishing/Hands-On-Dependency-Injection-in-Go/ch12/acme/internal/logging"
)

// DefaultEnvVar is the default environment variable the points to the config file
const DefaultEnvVar = "ACME_CONFIG"

// Config defines the JSON format for the config file
type Config struct {
        // DSN is the data source name (format: https://github.com/go-sql-driver/mysql/#dsn-data-source-name)
        DSN string

        // Address is the IP address and port to bind this rest to
        Address string

        // BasePrice is the price of registration
        BasePrice float64

        // ExchangeRateBaseURL is the server and protocol part of the URL from which to load the exchange rate
        ExchangeRateBaseURL string

        // ExchangeRateAPIKey is the API for the exchange rate API
        ExchangeRateAPIKey string

        // environmental dependencies
        logger logging.Logger
}

// Logger returns a reference to the singleton logger
func (c *Config) Logger() logging.Logger <span class="cov0" title="0">{
        if c.logger == nil </span><span class="cov0" title="0">{
                c.logger = &amp;logging.LoggerStdOut{}
        }</span>

        <span class="cov0" title="0">return c.logger</span>
}

// RegistrationBasePrice returns the base price for registrations
func (c *Config) RegistrationBasePrice() float64 <span class="cov0" title="0">{
        return c.BasePrice
}</span>

// DataDSN returns the DSN
func (c *Config) DataDSN() string <span class="cov0" title="0">{
        return c.DSN
}</span>

// ExchangeBaseURL returns the Base URL from which we can load exchange rates
func (c *Config) ExchangeBaseURL() string <span class="cov0" title="0">{
        return c.ExchangeRateBaseURL
}</span>

// ExchangeAPIKey returns the DSN
func (c *Config) ExchangeAPIKey() string <span class="cov0" title="0">{
        return c.ExchangeRateAPIKey
}</span>

// BindAddress returns the host and port this service should bind to
func (c *Config) BindAddress() string <span class="cov0" title="0">{
        return c.Address
}</span>

// Load returns the config loaded from environment
func Load() (*Config, error) <span class="cov0" title="0">{
        filename, found := os.LookupEnv(DefaultEnvVar)
        if !found </span><span class="cov0" title="0">{
                err := fmt.Errorf("failed to locate file specified by %s", DefaultEnvVar)
                fmt.Fprintf(os.Stderr, err.Error())
                return nil, err
        }</span>

        <span class="cov0" title="0">cfg, err := load(filename)
        if err != nil </span><span class="cov0" title="0">{
                fmt.Fprintf(os.Stderr, "failed to load config with err %s", err)
                return nil, err
        }</span>

        <span class="cov0" title="0">return cfg, nil</span>
}

func load(filename string) (*Config, error) <span class="cov8" title="1">{
        out := &amp;Config{}
        bytes, err := ioutil.ReadFile(filename)
        if err != nil </span><span class="cov8" title="1">{
                fmt.Fprintf(os.Stderr, "failed to read config file. err: %s", err)
                return nil, err
        }</span>

        <span class="cov8" title="1">err = json.Unmarshal(bytes, out)
        if err != nil </span><span class="cov0" title="0">{
                fmt.Fprintf(os.Stderr, "failed to parse config file. err : %s", err)
                return nil, err
        }</span>

        <span class="cov8" title="1">return out, nil</span>
}
</pre>
		
		</div>
	
	<script>
	(function() {
		var files = document.getElementById('files');
		var visible;
		files.addEventListener('change', onChange, false);
		function select(part) {
			if (visible)
				visible.style.display = 'none';
			visible = document.getElementById(part);
			if (!visible)
				return;
			files.value = part;
			visible.style.display = 'block';
			location.hash = part;
		}
		function onChange() {
			select(files.value);
			window.scrollTo(0, 0);
		}
		if (location.hash != "") {
			select(location.hash.substr(1));
		}
		if (!visible) {
			select("file0");
		}
	})();
	</script>

</body></html>